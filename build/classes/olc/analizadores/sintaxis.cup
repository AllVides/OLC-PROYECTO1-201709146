package olc.analizadores; 
import java_cup.runtime.*;
import olc.funciones.*;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import olc.GUI.*;

parser code 
{:
    //Codigo que se le agrega al parser
    public static Map<String, Arbol> map = new HashMap<String, Arbol>();
    public int contador = 1;
    public boolean flagi = true;

    public static Map<String, List<String>> conjunto = new HashMap<String, List<String>>();
    public static List<String> cadenas = new ArrayList<String>();

    //Codigo para Errores Sintacticos
    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        ErrorM nuevoe = new ErrorM("Tipo Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
        FrameP.listaErrores.add(nuevoe);
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        ErrorM nuevoe = new ErrorM("Tipo Sintactico (Irrecuperable)", s.value.toString(), s.right+1, s.left+1);
        FrameP.listaErrores.add(nuevoe);
        
    }  
:} 

terminal String conj, detail, assign, separate, end, open, clos,
        unomas, ceromas, conc, cerouno, estot;
terminal String charas, esp;
terminal String palabra, cadena;
terminal String conjuList, fromto;

non terminal INICIO;
non terminal ABC;
non terminal INP;
non terminal Nodo EXP;
non terminal List CONJ;

start with INICIO;

INICIO::=ABC;

ABC  ::= open ABC
    |  conj    detail  palabra:nombre   assign  CONJ:lista end ABC {: parser.conjunto.put(nombre, lista); :}
    |  palabra:nombre assign  EXP:var1 end ABC     {:System.out.println(nombre);parser.map.put(nombre, new Arbol());
                                                parser.map.get(nombre).setRaiz(new Nodo(var1, new Nodo(null, null, "#", parser.contador) ,"." , 0));
                                                parser.contador++;:}
    |  separate separate separate separate INP
    | error

;

CONJ ::= fromto:rango {:RESULT= Conjuntos.conjRange(rango);  :}
    |conjuList:conjunto {:RESULT= Conjuntos.conjList(conjunto); :}
    |error

;

INP ::=palabra:var1 detail cadena:var2 end INP {:System.out.println(var1 +" es "+ var2);
                                                parser.cadenas.add(var1+":=:!"+var2);:}
    |clos 
    |error
    |

;


EXP ::= cerouno EXP:var1    {:RESULT= new Nodo(var1, null, "?", parser.contador); parser.contador++; :}
 |  unomas EXP:var1         {:RESULT= new Nodo(var1, null, "+", parser.contador); parser.contador++;:}
 |  ceromas EXP:var1        {:RESULT= new Nodo(var1, null, "*", parser.contador); parser.contador++;:}
 |  conc EXP:var1 EXP:var2  {:RESULT= new Nodo(var1, var2, ".", parser.contador); parser.contador++;:}
 |  estot EXP:var1 EXP:var2 {:RESULT= new Nodo(var1, var2, "|", parser.contador); parser.contador++;:}
 |  open palabra:simbolo clos      {:RESULT= new Nodo(null, null, simbolo, parser.contador); parser.contador++;System.out.println(simbolo);:}
 |  cadena:simbolo     {:RESULT= new Nodo(null, null, simbolo, parser.contador); parser.contador++;System.out.println(simbolo);:}
 |  esp:simbolo        {:RESULT= new Nodo(null, null, simbolo, parser.contador); parser.contador++;System.out.println(simbolo);:}
 |error;


